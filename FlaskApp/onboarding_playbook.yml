---
- name: Onboarding new employee and deploying VM
  hosts: localhost
  vars:
    # General variables
    vcenter_hostname: "192.168.200.24"
    vcenter_username: "I483725@fontysict.nl"
    vcenter_password: "DF242hv[!"
    vcenter_datacenter: "Netlab-DC"
    vcenter_datastore: "DataCluster-Students"
    vm_folder: "/_Courses/I3-DB01/I483725/Orchestration/Users"
    vm_template: "Win10"
    resource_pool: "I483725"
    domain_name: "melmel.local"
    domain_admin_user: "Administrator"
    domain_admin_password: "securePass1!"

    # Employee-specific variables from the Flask web app
    employee_password: "Welcome01!!"
    display_name: "{{ given_name }} {{ middle_name | default('') }} {{ last_name }}"
    employee_name: "{{ given_name | lower }}.{{ last_name | lower }}"
    department_group: "{{ department }}"
    ou_path: "OU={{ department }},OU=Departments,DC=melmel,DC=local"

  tasks:
    # Create AD user on DC
    - name: Create new AD user in correct OU using PowerShell
      win_shell: |
        $password = ConvertTo-SecureString -AsPlainText -Force "{{ employee_password }}"
        New-ADUser -Name "{{ display_name }}" `
                   -GivenName "{{ given_name }}" `
                   -Surname "{{ last_name }}" `
                   -SamAccountName "{{ employee_name }}" `
                   -UserPrincipalName "{{ employee_name }}@melmel.local" `
                   -AccountPassword $password `
                   -PasswordNeverExpires $true `
                   -Enabled $true `
                   -Description "New employee in {{ department }}" `
                   -Path "{{ ou_path }}"
      delegate_to: 192.168.60.100

    - name: Add user to department-specific group using PowerShell
      win_shell: |
        if (Get-ADGroup -Identity "{{ department_group }}" -ErrorAction SilentlyContinue) {
            Add-ADGroupMember -Identity "{{ department_group }}" -Members "{{ employee_name }}"
            Write-Host "User {{ employee_name }} successfully added to group {{ department_group }}"
        } else {
            Write-Host "Group {{ department_group }} does not exist."
        }
      delegate_to: 192.168.60.100

    # Create Machine for the user
    - name: Clone VM and assign specific network
      community.vmware.vmware_guest:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        datacenter: "{{ vcenter_datacenter }}"
        datastore: "{{ vcenter_datastore }}"
        folder: "{{ vm_folder }}"
        template: "{{ vm_template }}"
        name: "{{ employee_name }}"
        state: powered-on
        wait_for_ip_address: yes
        resource_pool: "{{ resource_pool }}"
        networks:
          - name: "2719_I483725_PVlanB"
            type: "dhcp"
            dns_servers:  # Apply DNS settings directly in the network config
              - "192.168.60.100"
        customization:
          dns_servers:
            - "192.168.60.100"  # Redundant to ensure DNS is applied
          dns_suffixes:
            - "melmel.local"
          linux_options:
            host_name: "{{ given_name | lower | truncate(8, '') }}-{{ last_name | lower | truncate(6, '') }}"
            domain: "melmel.local"


      # register: vm_creation_info

    # - name: Run the PowerShell script to join the domain
    #   win_shell: C:\Scripts\join_domain.ps1
    #   vars:
    #     ansible_connection: winrm
    #     ansible_port: 5985
    #     ansible_winrm_transport: ntlm
    #     ansible_user: "Admin"
    #     ansible_password: "securePass1!"
    #   delegate_to: "{{ vm_creation_info.instance.ipv4 }}"
